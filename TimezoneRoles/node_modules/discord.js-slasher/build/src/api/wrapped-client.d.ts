import { Client, ClientOptions, IntentsString, ClientEvents, Awaitable, BitFieldResolvable } from 'discord.js';
import { CommandContext } from './command-context';
export declare type SlasherClientOptions = Omit<ClientOptions, 'intents'> & {
    /** The bot's login token, from the 'Bot' section of the application */
    token?: string;
    /** Whether to read the token from the auth.json file */
    useAuth?: boolean;
    /** The intents for this client, in most cases this can be left undefined */
    intents?: BitFieldResolvable<IntentsString, number>;
};
export declare class SlasherClient extends Client {
    private botToken;
    constructor(options: SlasherClientOptions);
    private addCommandHandler;
    login(token?: string): Promise<string>;
}
export declare interface SlasherClient {
    on(event: "command", listener: (context: CommandContext) => void): this;
    once(event: "command", listener: (context: CommandContext) => void): this;
    off(event: "command", listener: (context: CommandContext) => void): this;
    removeAllListeners(event: "command"): this;
    on<K extends keyof ClientEvents>(event: K, listener: (...args: ClientEvents[K]) => Awaitable<void>): this;
    on<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, listener: (...args: any[]) => Awaitable<void>): this;
    once<K extends keyof ClientEvents>(event: K, listener: (...args: ClientEvents[K]) => Awaitable<void>): this;
    once<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, listener: (...args: any[]) => Awaitable<void>): this;
    emit<K extends keyof ClientEvents>(event: K, ...args: ClientEvents[K]): boolean;
    emit<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, ...args: unknown[]): boolean;
    off<K extends keyof ClientEvents>(event: K, listener: (...args: ClientEvents[K]) => Awaitable<void>): this;
    off<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, listener: (...args: any[]) => Awaitable<void>): this;
    removeAllListeners<K extends keyof ClientEvents>(event?: K): this;
    removeAllListeners<S extends string | symbol>(event?: Exclude<S, keyof ClientEvents>): this;
}
